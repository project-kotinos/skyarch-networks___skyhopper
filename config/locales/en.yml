# Files in the config/locales directory are used for internationalization
# and are automatically loaded by Rails. If you want to use locales other
# than English, add the necessary files in this directory.
#
# To use the locales, use `I18n.t`:
#
#     I18n.t 'hello'
#
# In views, this is aliased to just `t`:
#
#     <%= t('hello') %>
#
# To use a different locale, set it with `I18n.locale`:
#
#     I18n.locale = :es
#
# This would use the information in config/locales/es.yml.
#
# To learn more, please read the Rails Internationalization guide
# available at http://guides.rubyonrails.org/i18n.html.

en:
  lang: 'en'

  common:
    actions:       'Actions'
    value:         'Value'
    required:      'Required'
    optional:      'Optional'
    username:      'User Name'
    password:      'Password'
    please_select: 'Select one'
    not_set:       'Not set'
    selected:      'Selected'
    btn:
      architecture:    'Architecture'
      settings:        'Settings'
      user_management: 'User Management'
      login:           'Log in'
      logout:          'Log out'
      submit:          'Submit'
      save_changes:    'Save Changes'
      lang:            'Language'
      previous:        'Previous'
      next:            'Next'
      delete:          'Delete'
      update:          'Update'
      import:          'Import'
      export:          'Export'
      all:             'All'
      multiple_select: 'Multiple Select'
      download:        'Download'
      help:            'How-To'
    msg:
      loading:       ' Loading...'
      creating:      ' Creating...'
      empty:         '%{name} is empty'
      no_permission: 'Permission denied'
      key_droppable: |
        Please either insert a private key or drag-and-drop the file of private key.
        It will be inserted automatically if you generate a new keypair.
      not_found:     'No results for  <span class="text text-info"> %{name} </span> was found.'
  views:
    pagination:
      first:    '&laquo;'
      last:     '&raquo;'
      next:     '&rsaquo;'
      previous: '&lsaquo;'
      truncate: '...'

  app_settings:
    log_directory:     'Log directory'
    app_directory:     'Application directory'
    aws_region:        'Region'
    aws_keypair:       'KeyPair'
    keypair_name:      'Name of KeyPair'
    private_key:       'Secret SSH Key'
    access_key:        'Access Key ID'
    secret_access_key: 'Secret Access Key'
    chef_server:       'Chef Server'
    warning:           'Warning!'
    vpc_id:            'VPC ID'
    subnet_id:         'Subnet ID'

    msg:
      created:           'SkyHopper setup completed. Please press the done button to redirect to next step which is creating a user account to login into the system.'
      show:              'Welcome to SkyHopper!'
      log_directory:     'Logs could not be displayed in database. Instead, it will be stored in this directory'
      app_directory:     'The installation path of SkyHopper. That is already configured.'
      access_key:        'AWS Access Key ID for SkyHopper System'
      secret_access_key: 'AWS Secret Access Key for SkyHopper System'
      aws_region:        'Regions of AWS available for SkyHopper System'
      aws_keypair:       'SSH key used for SkyHopper System (Registered KeyPair from EC2 console that is linked with API key above)'
      zabbix_updated:    'Zabbix Setting was successfully updated.'
      eip_limit_error:   'Cannot allocate EIP. Please check the limit of EIP.'
      insert_key:        'Please enter aws keys first and select a region.'
      incorrect_file:    'Please select a correct AWS keypair .pem file'
      delete_file:       'Are you sure you want to remove %{name}.pem  file?'
      create_keypair:    ''
      aws_description:  |
        SkyHopper constructs the Chef Server and the Zabbix Server on the AWS.
        The following settings of the AWS you entered are only used to construct the Chef Server and the Zabbix Server.
      warning_msg:  'We recommend to use only <b> Google Chrome </b> or <b> Firefox </b> web browsers. As SkyHopper only works best on these browsers.'
      db_export:         'When exporting SkyHopper Database into a zip file, it includes these files: '
      env:  'SkyHopper%{env}.sql'
      secret: 'secret_key_base'
      db_key:  'db_crypt_key'
      vpc_id_not_found:  'The vpc ID <b> "%{id}" </b> does not exist.'
      subnet_id_not_found: 'The subnet ID <b> "%{id}" </b> does not exist.'
    title:
      show:   'Welcome to SkyHopper!'
      setup:  'Setup'
      system: 'System Settings'
      chef:   'Chef Server Settings'
      aws:    'AWS Settings'
      new_keypair:   'Create a new KeyPair'
      exist_keypair: 'Use existing KeyPair'
      drop_file:     'Drop file here or click to select'
      pem_file:      'Must be a .pem file created from AWS'
    btn:
      create_chefserver: 'Create Chef Server'
      done:              'Done'
      create_download:   'Create & Download'
    intro:
      aws_keys:   |
        AWS access and secret key is required to construct Chef & Zabbix Server and to enable SkyHopper to manage your infrastructures.
        If you have no AWS Securty credentials yet, please follow this link:
        <a href="http://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html" target="_blank"> Managing Access Keys for your AWS Account </a>.
      aws_region: |
        After setting the security credentials please select the aws region for SkyHopper instances to be deployed.
        The purpose for this is to reduce data latency in the application.
      aws_keypair: |
        To allow SkyHopper to access your instance, you must create a key pair, specify the name of the key pair when you launch the instance.
        In this case, if you have already a KeyPair you can select 'Use Existing KeyPair' and select or drag the file into the drop box.
        However, you can also create a new KeyPair Using the entered AWS Security Credentials you entered and by selecting 'Create a New KeyPair' option.
      chef_button: 'After the above process, you can now press Create Chef Server button to start the installation.'

  clients:
    client: 'Client'
    code:   'Code'
    name:   'Name'
    projects: 'Project(s)'
    btn:
      show_projects: 'Show'
      add:           'New Client'
    msg:
      no_permission:      'Permission denied to to utilize the "Clients" feature'
      created:            'Client was successfully created.'
      updated:            'Client was successfully updated.'
      deleted:            'Client "%{name}" was successfully deleted.'
      cant_change_system: 'Unable to change client for this system.'
      delete_client:      'Are you sure you want to delete this client?'


  projects:
    project:           'Project'
    code:              'Code'
    name:              'Name'
    access_key:        'Access Key ID'
    secret_access_key: 'Secret Access Key'
    cloud_provider:    'Cloud Provider'
    infras:            'Infra(s)'
    btn:
      show_infrastructures: 'Show'
      add:                  'New Project'
    msg:
      created:            'Project was successfully created.'
      updated:            'Project was successfully updated.'
      deleted:            'Project "%{name}" was successfully deleted.'
      cant_delete_system: 'Unable to delete project for this system.'
      empty-list:         'No Project found.'
      delete_project:     'Are you sure you want to delete this project?'
      zabbix_not_set:     'Please Select Zabbix Server for this Project.'


  project_parameters:
    title: 'Parameter'
    description_html: 'You can set/edit the parameters for each project.<br />
                  Furthermore, you can use the given parameters in CloudFormation and Cook.'
    usage: 'You can use project parameters by using this tag ${NAME}'
    btn:
      remove:   'Remove'
      unremove: 'Undo'
    msg:
      updated: 'Parameters was successfully updated.'
    label:
      removed: 'Removed'
      new:     'New'
      edited:  'Edited'

  infrastructures:
    infrastructure:     'Infrastructure'
    genre:              'Genre'
    stackname:          'Stack Name'
    physical_id:        'Instance ID'
    date:               'Date'
    region:             'Region'
    keypair:            'KeyPair Name'
    creation_time:      'Creation Time'
    status:             'Status'
    sshkey:             'SSH Private Key'
    return_to_projects: 'Return to your projects'
    stack_info:         'Stack Information'
    no_stack_info:      'No stack information.'
    in_progress:        'In progress...'
    database:           'Database'
    runlist:            'Runlist'
    instance_type:      'Instance type'
    add_ec2:            'Add EC2'
    serverspec_failed:  'Serverspec failed'
    search:             'Search by Keyword ...'
    operations:         'Operations'
    monitoring:         'Monitoring'
    logs:               'Logs'
    btn:
      delete_stack:         'Delete Stack'
      delete_stack_confirm: 'Execute'
      operation_schedule:   'Operation Schedule'
      add:                  'New Infrastructure'
      change_scale:         'Change scale'
      generate_serverspec:  'Generate Serverspec'
      apply_template:       'Apply CloudFormation Template'
      template_history:     'CloudFormation Template History'
      stack_eventlog:       'Stack Eventlog'
      infrastructure_log:   'Operation Log'
    msg:
      created:                     'Infrastructure was successfully created.'
      updated:                     'Infrastructure was successfully updated.'
      detached:                    'Infrastructure was successfully decontrolled.'
      delete_stack_failed:         'Failed to delete stack'
      delete_stack_started:        'Deleting stack started'
      create_stack_failed:         'Failed to create stack'
      detach_stack_confirm:        'Are you sure you want to decontrol this stack?'
      delete_stack_confirm:        'Are you sure you want to delete this stack?'
      help_keypair:                'Please set up a KeyPair to utilise EC2::Instance.'
      no_keypair:                  'KeyPair has not been set'
      no_stack_info:               'Unable to get information for this stack for the following reasons.'
      not_necessary:               'It is not necessary to edit this infrastructure.'
      check_intervals:             'Automatic status update: every 15 seconds ...'
      generate_serverspec_confirm: 'Generate serverspec to verify access to RDS Instance?'
      empty-list:                  'No Infrastructure found.'
      loading-list:                'Loading Infrastructures ...'
      invalid_keypair:             'Invalid key pair! Please check the keypair file.'
      modifying:                   'Modifying instance.. updates in 15 seconds.'
      change_scale_warning:        'The instance will be stopped temporarily if the scale changes.'

  security_groups:
    title:        'Security Groups'
    associated:   'Security Groups associated with'
    description:  'Description'
    group_id:     'Security Group ID'
    group_name:   'Security Group Name'
    inbound:      'Inbound'
    outbound:     'Outbound'
    type:         'Type'
    protocol:     'Protocol'
    port_range:   'Port Range'
    source:       'Source'
    destination:  'Destination'
    name:         'Name'
    list_all:     'List of all Security Groups'
    denotes:      '* denotes default VPC'
    btn:
      view_rules:           'View Rules'
      change_groups:        'Change Security Groups'
      assign:               'Assign Security Groups'
      security_groups:      'Security Groups'
      create:               'Create Security Group'
    msg:
      change_success:        'Change Security Groups Success!'
      error:  'Error!'
      error_msg: 'you need to select at least one security group.'


  operation_scheduler:
    title: 'Operation Scheduler'
    modal_title: 'Manage Schedule'
    recurring: 'Recurring'
    duration: 'Duration'
    screen_name: 'Screen Name'
    recurring-content: 'The dates in which the instance will start/stop depending on the choices below.'
    duration-content: 'The duration of the instance to run. Depending in the specified start and end date.
                      Also, the time it will start/stops depends on the time choosen'
    every: 'Every:'
    start_date: 'Start Date'
    end_date: 'End Date'
    start_time: 'Time:'
    end_time: 'Time:'

    btn:
      view_sched: 'View Schedule'
      manage_sched: 'Manage Schedule'
    desc:
      everyday: 'Everyday'
      weekdays: 'Weekdays (Monday - Friday)'
      weekends: 'Weekends (Saturday & Sunday)'
      specific_dates: 'Specific dates (other)'
    dates:
      monday: 'Monday'
      tuesday: 'Tuesday'
      wednesday: 'Wednesday'
      thursday: 'Thursday'
      friday: 'Friday'
      saturday: 'Saturday'
      sunday: 'Sunday'
    msg:
      saved: 'Operation Schedule successfully saved.'

  nodes:
    bootstrap:   'Bootstrap'
    cook:        'Cook'
    runlist:     'Runlist'
    recipe:      'Recipe'
    cookbook:    'CookBook'
    role:        'Role'
    statuses:    'Statuses'
    latest_cook_status:       'Latest Cook Status'
    latest_update_status:     'Latest yum command Status'
    latest_serverspec_status: 'Latest Serverspec Status'
    cook_in_why_run_mode:     'Cook(why-run)'
    btn:
      edit_runlist:               'Edit Runlist'
      apply_dish:                 'Apply Dish'
      bootstrap_with_chef_server: 'Bootstrap with Chef Server'
      instance_settings:          'Settings'
    msg:
      before_bootstrap:   'This instance is not bootstrapped with Chef Server.'
      no_dishes:          'No valid dishes available.'
      cooking:            'Cook being executed...'
      updating:           'yum command is in progress...'
      bootstrap_finish:   '%{physical_id} was successfully registered with Chef Server.'
      not_change_scale:   "Unnecessary to change to '%{type}'"
      changed_scale:      'Change scale to %{type}'
      runlist_updated:    'Runlist was successfully updated.'
      runlist_applying:   'Runlist is being applied...'
      cook_started:       'Cook was successfully started'
      should_set_attr:    "Cook wasn't started. You should set the attribute(s)"
      attribute_updated:  'Attribute was successfully updated.'
      yum_update_confirm: 'Are you sure you want to execute yum command?'
      yum_update_started: 'yum command is started.'
      attr_not_exists:    'Available attributes does not exists'
      runlist_empty:      'Runlist is empty'
      dish_applied:       'Dish was applied.'
      stopped:            'Instance has stopped. Please start instance to enable bootstrap.'
      yum_update_success: |
        Yum update for <b> %{physical_id} </b> has been successful. <br>
        Do you want to see the logs for this operation?

  dishes:
    dishes:            'Dishes'
    dish:              'Dish'
    name:              'Name'
    detail:            'Detail'
    validation_status: 'Validation Status'
    validate:          'Validate'
    btn:
      add: 'Add Dish'
    msg:
      updated:                'Dish was successfully updated.'
      created:                'Dish was successfully created.'
      deleted:                'Dish was successfully deleted.'
      description:            'Dish is a preset to configure EC2 Instance.'
      no_serverspec_selected: 'No serverspecs selected.'
      empty-list:             'No dishes found.'
      delete_dish:            'Are you sure you want to delete this Dish?'


  servertests:
    name:              'Name'
    servertests:       'Servertests'
    serverspec:        'Servertest'
    description:       'Description'
    value:             'Value'
    auto_generated:    'Auto generated Servertests'
    global:            'Global'
    individual:        'Infrastructure Individual'
    select_serverspec: 'Select Servertests'
    created_at:        'at'
    operation_logs:    'Operation Logs'
    run:               'Run Servertests'
    results:           'Servertest Results'
    category:          'Category'
    btn:
      add:       'Add Servertest'
      create:    'Create Servertest'
      run:       'Run Servertests'
      serverspec_generator: 'Servertest Generator'
      awspec_generator:      'AWSpec Generator'
      generate:   'Generate'
    msg:
      created:   'Servertest was successfully created.'
      updated:   'Servertest was successfully updated.'
      deleted:   'Servertest was successfully deleted'
      parseerr:  'Something went wrong with Servertest Operation.'
      success:   'Serverspec for %{physical_id} is successfully finished.'
      pending:   'Serverspec for %{physical_id} is successfully finished. Pending specs: %{pending_specs}'
      failure:   'Serverspec for %{physical_id} has failed. failure specs: %{failure_specs}'
      generated: 'Serverspec is successfully generated.'
      delete_servertest: 'Are you sure you want to delete this Servertest?'
      empty-results: 'No results found.'
      auto_generated_enabled_html:  '<small>This Serverspec was created automatically by "<em>serverspec-handler</em>" cookbook.</small>'
      auto_generated_disabled_html: '<small>This option is available only when runlist includes "<em>serverspec-handler</em>" cookbook.</small>'
      generated:  'Generated file'
      generating:  'Generating file spec ...'
      select_infra: 'Select Infrastructure'
    generator:
      title:         'Serverspec Generator'
      name:          'name'
      resources:     'Resources'
      resource_type: 'Resource Type'
      add_resource:  'Add Resource'
      add_it:        'Add It Block'
      add_its:       'Add Its Block'
      generated:     'Generated Serverspec'


  schedules:
    schedule:         'Schedule'
    change_schedule:  'Change schedule'
    run_periodically: 'Run periodically'
    o_clock:          "o'clock"
    hours:            'hours'
    next_run:         'Next run time is at {{next_run}}:00'
    label:
      per_n_hours:    'per %{n} hour(s)'
      daily:          'Daily %{n}:00'
      weekly:         'Every %{w} %{n}:00'
    frequency:
      weekly:     'Weekly'
      daily:      'Daily'
      intervals:  'Intervals'
    day_of_week:
      sunday:     'Sunday'
      monday:     'Monday'
      tuesday:    'Tuesday'
      wednesday:  'Wednesday'
      thursday:   'Thursday'
      friday:     'Friday'
      saturday:   'Saturday'
    msg:
      serverspec_updated: 'Periodic schedule for running Serverspec has updated.'
      yum_updated: 'Periodic schedule for running of Yum has updated.'
      snapshot_updated: 'Periodic schedule for creating snapshot has updated.'


  cf_templates:
    cf_templates: 'CloudFormation Templates'
    cf_template:  'CloudFormation Template'
    subject:      'Subject'
    details:      'Details'
    operator:     'Operator'
    parameters:   'Parameters'
    history:      'History'
    global:       'Presets'
    insert_parameters: 'Set Parameters'
    enable_property:   'Use this property'
    parameterize:      'Parameterize this property'
    btn:
      add:  'Add Template'
      send: 'Send'
    msg:
      keypair_missing: 'Please set up a KeyPair to utilise EC2::Instance.'
      created:         'Template was successfully created.'
      updated:         'Template was successfully updated.'
      deleted:         'Template was successfully deleted.'
      updating:        'Updating stack'
      creating:        'Creating stack'
      delete_cf_template: 'Are you sure you want to delete this Cf_template?'
      confirm_export:  ' Are you sure you want to export the following templates?'


  template_builder:
    template_builder: 'Template Builder'
    resources:        'Resources'
    select_resources: 'Select Resource'
    enable:           'Enable'
    disable:          'Disable'
    btn:
      add_resource: 'Add this resource'

  monitoring:
    title:                'Monitoring'
    show:                 'Show'
    configuration:        'Configuration'
    template:             'Monitoring Template'
    select:               'Monitoring Options'
    trigger:              'Setting threshold'
    explanation_triggers: 'Triggers'
    register_host:        'Register infrastructure with Zabbix Server'
    before_reg_title:     'Please select template before proceeding.'
    zabbix_templates:     'Zabbix Templates'
    btn:
      create: 'Register'
      add:    'Add'
      edit:   'Edit'
      delete: 'Delete'
      done:   'Done'
      cancel: 'Cancel'
      close:  'Close'
      save:   'Save'
      next:   'Next'
      prev:   'Prevous'
    msg:
      host_creating:           'Registering infrastructure...'
      before_create_host:      'This infrastructure has not been registered with Zabbix Server.'
      created:                 'This infrastructure has been registered with Zabbix Server.'
      updated:                 'Monitoring configuration updated.'
      update_templates:          'Zabbix templates updated!.'
      failure:                 'Failed to register with Zabbix Server.'
      not_selected:            'Monitoring options not selected yet.'
      invalid_parameters:      'Username or password of Zabbix Server are incorrect.'
      not_running:             'Zabbix Server is not running.'
      not_set:                 ': was not selected in zabbix Templates. Please select template in the configuration tab.'
      trigger_setting_warning: 'Threshold will be updated only if you have selected items.'
      page:                    'Page'
      of:                      'of'
      no_data: |
        Failed to fetch any data.
          1. Zabbix Agent may not have been installed into the server.
          2. Cannot fetch any data when the Zabbix Agent is freshly installed. You should retry after a short intervals.
          3. Required package may not have been installed into the server. (Ex. MySQL Server, Client etc...)
    explanations:
      cpu:                      'Average of CPU usage last a minute'
      ram:                      'Average of free Memory last a minute'
      loadaverage:              'Load Average last a minute'
      swap:                     'Swap usage last a minute'
      http:                     'HTTP request failed three times in a row'
      smtp:                     'SMTP request failed three times in a row'
      url:                      'Check Response body, Status code and Response time of specified URL'
      mysql:                    ' Create an account of MySQL, and try to login to MySQL.'
      postgresql:               ' Create an account of PostgreSQL, and try to login to PostgreSQL.'


  users:
    title:             'User Management'
    user:              'User'
    role:              'Role'
    email:             'E-Mail'
    password:          'Password'
    password_confirm:  'Password Confirmation'
    last_signed_in_at: 'Last signed in at'
    you:               'YOU'
    edit:              'Edit Permissions'
    allowed_projects:  'Allowed Projects'
    unregistered:      'Unregistered'
    mfa_token:         'MFA Token'
    mfa:               'Multi Factor Authentication'
    change_password:   'Change Password'
    change_mfa_secret: 'Change secret key of MFA'
    use_start_mfa:     'Use start MFA'
    use_stop_mfa:      'Use stop MFA'
    mfa_secret:        'Secret key of MFA'
    search:            'Search by email'
    create_new_user:   'Create New User'
    create_admin_user: 'Create Administrator User'
    remember_me:       'Remember me'
    btn:
      add: 'Add User'
      sync: 'Synchronize with Zabbix Server'
    msg:
      role:                  'Master users can see all the infrastructures. Admin users can change assigned infrastructures.'
      created:               'An account was successfully created.'
      updated:               'An account was successfully updated.'
      deleted:               '"%{name}" was successfully deleted.'
      synced:                'All of accounts was successfully synchronized with Zabbix Server.'
      only_master:           'The feature of User Management is only permitted to Master users.'
      confirm_sync_zabbix:   'Do you want to synchronize users with Zabbix Server?'
      mfa_description:       'This user is protected by MFA. Please enter one-time password.'
      mfa_failure:           'Invalid one-time password'
      mfa_used:              'MFA is already used.'
      mfa_start_description: 'Enter secret key to MFA device. Or Scan QR code.'
      use_stop_mfa:          'If save changes, use stop MFA.'
      delete_user:           'Are you sure you want to delete this User?'
      error:                 'An error occured while processing Zabbix: "%{msg}"'


  chef_servers:
    msg:
      creating_infra: 'Creating Infrastructure...'
      init_ec2:       'Initializing EC2 Instance...'
      download_chef:  'Downloading Chef Server packages...'
      install_chef:   'Installing Chef Server...'
      setting_chef:   'Setting up Chef Server...'
      complete:       'SkyHopper setup completed. Please press the done button to redirect to next step which is creating a user account to login into the system.'
      setting_up:     'Setting up other necessary commands.'
      confirm_start:  'Do you want to start Chef Server?'
      confirm_stop:   'Do you want to stop Chef Server?'
      start:          'Stopping Chef Server...'
      stop:           'Starting Chef Server...'
      not_running:    'Chef Server is not running.'
      chef_instruction:   'The Knife file can be installed in your environment by deploying the downloaded file in `~/.chef/` path. When executing the knife command, this file is neccessary to access the Chef Server.'
    btn:
      download_keys:  'Download keys'

  zabbix_servers:
    zabbix:      'Zabbix Servers'
    version:     'Version'
    details:     'Details'
    btn:
      add:            'Add Zabbix Server'
      background:     'Run in Background'
    msg:
      creating_infra: 'Creating Infrastructure...'
      creating_stack: 'Creating Stack...'
      init_ec2:       'Initializing EC2 Instance...'
      install_zabbix: 'Installing Zabbix Server...'
      setting_zabbix: 'Setting Zabbix Server...'
      complete:       'Zabbix Server was successfully constructed.'
      confirm_start:  'Do you want to start Zabbix Server?'
      confirm_stop:   'Do you want to stop Zabbix Server?'
      start:          'Stopping Zabbix Server...'
      stop:           'Starting Zabbix Server...'
      not_running:    'Zabbix Server is not running.'
      connrefused:    'Could not connect to Zabbix Server. Please check the configuration.'
      created:        'Zabbix server was successfully created.'
      updated:        'Zabbix server was successfully updated.'
      deleted:        'Zabbix Server "%{name}" was successfully deleted.'
      delete_server:  'Are you sure you want to delete this zabbix server?'

  ec2_instances:
    description:       'Description'
    settings:          'Settings'
    change_status:     'Change status of EC2 instance'
    changing_status:   'Changing status of EC2 instance...'
    listeners:         'Listeners'
    protocol:          'Protocol'
    lb_port:           'LoadBalancer Port'
    instance_protocol: 'Instance Protocol'
    instance_port:     'Instance Port'
    expiration_date:   'Expiration date of SSL certificate'
    certificate_name:  'Certificate name'
    private_key:   'Private key'
    public_key_certificate: 'Public certificate'
    certificate_chain:   'Certificate chain'
    certificate:       'Certificate'
    instances:         'Instances'
    state:             'State'
    reason_code:       'Reason Code'
    attach:            'Attach'
    attachable_volumes: 'Attachable Volumes'
    device_name:       'Device Name'
    set_device_name:   'Set Device Name'
    none:              'None'
    ec2_instance:      'EC2 Instance'
    create_volume:     'Create Volume'
    detach_volume:     'Detach Volume'
    volume_type:       'Volume Type'
    encryption:        'Encryption'
    msg:
      start_ec2:             'Start to turn on the power EC2 instance.'
      stop_ec2:              'Start to turn off the power EC2 instance.'
      detach_ec2:            'EC2 instance has been detached'
      terminate_ec2:            'EC2 instance has been terminated'
      registered_to_elb:     'EC2 instance was successfully registered to ELB.'
      deregistered_from_elb: 'EC2 instance was successfully deregisterd from ELB.'
      volume_attached:       '%{volume_id} has attached to %{instance_id}. Device name is %{device}'
      created_listener_to_elb: 'Created the listener from the ELB.'
      deleted_listener_to_elb: 'Deleted the listener from the ELB.'
      uploaded_certificate: 'Uploaded the certificate.'
      deleted_certificate: 'Deleted the certificate.'
      private_key_droppable: 'Please either insert a private key or drag-and-drop the file of private key.'
      public_key_certificate_droppable: 'Please either insert a public key certificate or drag-and-drop the file of public key certificate.'
      certificate_chain_droppable: '(Option) Please either insert a certificate chain or drag-and-drop the file of certificate chain.'
      detach:               'This instance will be removed from SkyHopper service. But the instance will still be available on AWS.
                             The following services will also be detached from the EC2 instance.'
      terminate:            'This instance will be removed from Skyhopper service.
                             On an EBS-backed instance, the default action is for the root EBS volume to be deleted when the instance is terminated.
                             Storage on any local drives will be lost.'
      security_groups:  'The security groups to which the instance belongs.
                         A security group is a collection of firewall rules that restrict the network traffic for the instance.
                         Click View rules to see the rules for the specific group.'
      detach_volume:         'Are you sure you want to detach %{volume_id} from %{physical_id}?'
      volume_detached:       '%{volume_id} has detached.'
      creating_volume:       'Creating volume <code>%{volume_id}</code> has started.'
    btn:
      register:   'Register to ELB'
      deregister: 'Deregister from ELB'
      create_to_elb_listener: 'Create to listener'
      edit_to_elb_listener: 'Edit to listener'
      delete_to_elb_listener: 'Delete to listener'
      upload_certificate: 'Upload certificate'
      edit_certificate: 'Edit certificate'
      delete_certificate: 'Delete certificate'
      check_security_update: 'Check security updates'
      exec_security_update:  'Execute security update'
      check_all_update:      'Check all updates'
      exec_all_update:       'Execute all update'
    confirm:
      register:   'Do you want to register this EC2 instance with ELB?'
      deregister: 'Do you want to release the registration of EC2 instance from ELB?'
      delete_listener: 'Do you want to delete of listener from ELB?'
      delete_certificate: 'Do you want to delete of certificate?'
      detach:   'Are you sure you want to detach this EC2 instance from SkyHopper?'
      terminate:   'Are you sure you want to terminate this EC2 instance?'
    ebs_volume_types:
      gp2:      'General Purpose SSD'
      io1:      'Provisioned IOPS SSD'
      st1:      'Throughput Optimized HDD'
      sc1:      'Cold HDD'
      standard: 'EBS Magnetic'

  ec2_private_keys:
    msg:
      enter_or_generate: 'You should generate a new keypair or enter one of the keypairs existing at AWS'
      please_name: 'Please input keypair name'
    btn:
      new: 'Generate new KeyPair'
    confirm:
      create: 'Would you like to create new KeyPair to AWS?'

  resources:
    screen_name: 'Screen Name'
    msg:
      created: 'Resource was successfully created.'


  key_pairs:
    key_pairs:   'Key Pairs'
    name:        'Key pair name'
    fingerprint: 'Fingerprint'
    region:      'Region'
    using:       'Using'
    msg:
      confirm:    'Are you sure to delete the KeyPair "%{name}"?'
      deleted:    'KeyPair "%{name}" has been deleted successfully.'

  snapshots:
    snapshots:         'Snapshots'
    create_snapshot:   'Create Snapshot'
    delete_snapshot:   'Delete Snapshot'
    schedule_snapshot: 'Schedule Snapshot Creation'
    list_of_snapshots: 'List of Snapshots'
    retention_policy:  'Retention Policy'
    snapshots_to_keep: 'Snapshots to keep'
    snapshot_id:       'Snapshot ID'
    msg:
      no_snapshots:    'You do not have any snapshots for this volume'
      create_snapshot: 'Are you sure you want to create snapshot of %{volume_id} ?'
      delete_snapshot: 'Are you sure you want to delete following snapshots?'
      creation_started: 'Snapshot creation has started.'
      snapshot_is_protected: 'Cannot delete %{snapshot_id} because it is protected.'
      policy_saved:    'Retantion policy has been saved successfully.'
      create_volume:   'Are you sure you want to create a volume from %{snapshot_id}?'

  datepicker:
    today: 'Go to Today'
    selectTime: 'Select Time'
    selectMonth: 'Select Month'
    togglePeriod: 'Toggle Period'
    incrementMinute: 'Increment Minute'
    decrementMinute: 'Decrement Minute'
    pickMinute: 'Pick Minute'
    incrementHour: 'Increment Hour'
    decrementHour: 'Decrement Hour'
    pickHour: 'Pick Hour'
  instructions:
    signup_head: 'Sign up'
    signup_body: |
      Since the user has not yet exists after deployment, It will require you to sign up to SkyHopper.
      Access skyhopper and go to sign up page after deployment. Then enter user name and email, make sure you select the Admin and Master checkbox before pressing create.
    client_head: 'Create client.'
    client_body: |
      Please click new client button and enter name and code which must be a unique string of the client.
    project_head: 'Create Project'
    project_body: |
      When creating a project, select a client and click new project button and fill out the form with the code, name, cloud providers,
      access key and secret access key created from AWS.
    infrastructure_head: 'Create Infrastructure'
    infrastructure_body: |
      After creating and selecting project in a client, the step is to create an infrastructure to be managed inside your project. Which requires a keypair,
      stackname, and region. If you have no keypair yet, you can create a new keypair using the generate keypair function.
    cf_template_head: 'Apply CloudFormation Template'
    cf_template_body: |
      In order to apply a cloud formation template, you have to <b> select an infrastructure </b> to show details and click the <b> operations menu</b> and apply <b> cloudformation tab </b>.
      Then, the list of cloud formation templates will appear in the screen. Please select the template as you like and fillout the required fields to set the parameters then press send to start creating your new stack.
      You can also add an EC2 if you have created it already on AWS. For more instructions, please visit <a href="http://skyhopper.org" target="_blank"> skyhopper.org </a>.
  databases:
    db_management: 'Database Management'
    import_db:     'Import DB'
    msg:
      env:       'SkyHopper%{env}.sql'
      secret:    'secret_key_base'
      db_key:    'db_crypt_key'
      db_export: 'When exporting SkyHopper Database into a zip file, the following files are included: '
      db_import: 'When importing SkyHopper Database, select a zip file that contains these files: '
      db_import_finish: 'Database import has finished.'
      db_import_intro:  'You can not perform any operations until the import is complete.'
      db_import_warning: |
        Database of SkyHopper will be replaced completely by the import operation.
        Please be careful when using this.
      under_maintenance: |
        Temporarily unavailable due to database import process.
        Please wait for at least a minute and try to refresh the browser again.
